Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:


Input: matrix = [[1,2,3],
                 [4,5,6],
                 [7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1, 2, 3, 4],
                 [5, 6, 7, 8],
                 [9, 10, 11, 12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


Explanation:
The problem is to traverse a given m x n matrix in spiral order and return the elements in a list. The spiral order starts from the top-left corner of the matrix and proceeds in a clockwise direction.

Pseudo Algorithm:
1. Initialize an empty list `result` to store the elements in spiral order.
2. Define the boundaries of the matrix: `top`, `bottom`, `left`, and `right`.
3. While `top` <= `bottom` and `left` <= `right`:
    a. Traverse from `left` to `right` along the `top` boundary and add elements to `result`.
    b. Increment `top` boundary.
    c. Traverse from `top` to `bottom` along the `right` boundary and add elements to `result`.
    d. Decrement `right` boundary.
    e. If `top` <= `bottom`, traverse from `right` to `left` along the `bottom` boundary and add elements to `result`.
    f. Decrement `bottom` boundary.
    g. If `left` <= `right`, traverse from `bottom` to `top` along the `left` boundary and add elements to `result`.
    h. Increment `left` boundary.
4. Return the `result` list.


Dry Run:

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]

Initial state:
result = []
top = 0, bottom = 2, left = 0, right = 2

1st iteration:
- Traverse from left to right along the top boundary:
    result = [1, 2, 3]
    Increment top: top = 1
- Traverse from top to bottom along the right boundary:
    result = [1, 2, 3, 6, 9]
    Decrement right: right = 1
- Traverse from right to left along the bottom boundary:
    result = [1, 2, 3, 6, 9, 8, 7]
    Decrement bottom: bottom = 1
- Traverse from bottom to top along the left boundary:
    result = [1, 2, 3, 6, 9, 8, 7, 4]
    Increment left: left = 1

2nd iteration:
- Traverse from left to right along the top boundary:
    result = [1, 2, 3, 6, 9, 8, 7, 4, 5]
    Increment top: top = 2

Final state:
top = 2, bottom = 1, left = 1, right = 1
Condition top <= bottom and left <= right is false, exit loop.

Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]

Example 2:
Input: matrix = [[1, 2, 3, 4],
                                 [5, 6, 7, 8],
                                 [9, 10, 11, 12]]

Initial state:
result = []
top = 0, bottom = 2, left = 0, right = 3

1st iteration:
- Traverse from left to right along the top boundary:
    result = [1, 2, 3, 4]
    Increment top: top = 1
- Traverse from top to bottom along the right boundary:
    result = [1, 2, 3, 4, 8, 12]
    Decrement right: right = 2
- Traverse from right to left along the bottom boundary:
    result = [1, 2, 3, 4, 8, 12, 11, 10, 9]
    Decrement bottom: bottom = 1
- Traverse from bottom to top along the left boundary:
    result = [1, 2, 3, 4, 8, 12, 11, 10, 9, 5]
    Increment left: left = 1

2nd iteration:
- Traverse from left to right along the top boundary:
    result = [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
    Increment top: top = 2

Final state:
top = 2, bottom = 1, left = 1, right = 2
Condition top <= bottom and left <= right is false, exit loop.

Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
