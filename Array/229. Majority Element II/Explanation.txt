Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?

Approach 1: Using HashMap
1. Initialize an empty HashMap to store the frequency of each element.
2. Traverse the array and update the frequency of each element in the HashMap.
3. Iterate through the HashMap and collect elements that have a frequency greater than ⌊ n/3 ⌋.

Dry Run:
Input: [1,2,3,4,2,2,4,2,3,3,3]
Step 1: Initialize HashMap: {}
Step 2: Traverse the array and update frequencies:
    - 1: {1: 1}
    - 2: {1: 1, 2: 1}
    - 3: {1: 1, 2: 1, 3: 1}
    - 4: {1: 1, 2: 1, 3: 1, 4: 1}
    - 2: {1: 1, 2: 2, 3: 1, 4: 1}
    - 2: {1: 1, 2: 3, 3: 1, 4: 1}
    - 4: {1: 1, 2: 3, 3: 1, 4: 2}
    - 2: {1: 1, 2: 4, 3: 1, 4: 2}
    - 3: {1: 1, 2: 4, 3: 2, 4: 2}
    - 3: {1: 1, 2: 4, 3: 3, 4: 2}
    - 3: {1: 1, 2: 4, 3: 4, 4: 2}
Step 3: Collect elements with frequency > ⌊ 11/3 ⌋ = 3:
    - Result: [2, 3]

Approach 2: Boyer-Moore Voting Algorithm
1. Initialize two candidate variables and their respective counts.
2. Traverse the array to find potential candidates.
3. Verify the candidates by counting their actual frequencies.

Dry Run:
Input: [1,2,3,4,2,2,4,2,3,3,3]
Step 1: Initialize candidates and counts: candidate1 = None, count1 = 0, candidate2 = None, count2 = 0
Step 2: Traverse the array to find candidates:
    - 1: candidate1 = 1, count1 = 1
    - 2: candidate2 = 2, count2 = 1
    - 3: count1 = 0, count2 = 0
    - 4: candidate1 = 4, count1 = 1
    - 2: candidate2 = 2, count2 = 1
    - 2: count2 = 2
    - 4: count1 = 2
    - 2: count2 = 3
    - 3: count1 = 1, count2 = 2
    - 3: count1 = 0, count2 = 1
    - 3: candidate1 = 3, count1 = 1
Step 3: Verify candidates:
    - Count frequencies of candidate1 (3) and candidate2 (2):
        - 3 appears 4 times
        - 2 appears 4 times
    - Result: [2, 3]