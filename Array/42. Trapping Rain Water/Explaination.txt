Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

Dry Run:

Let's take the example height = [0,1,0,2,1,0,1,3,2,1,2,1].

1. Initialize left_max and right_max arrays to store the maximum height to the left and right of each bar.
    left_max = [0,0,0,0,0,0,0,0,0,0,0,0]
    right_max = [0,0,0,0,0,0,0,0,0,0,0,0]

2. Fill left_max array:
    left_max[0] = height[0] = 0
    left_max[1] = max(left_max[0], height[1]) = max(0, 1) = 1
    left_max[2] = max(left_max[1], height[2]) = max(1, 0) = 1
    left_max[3] = max(left_max[2], height[3]) = max(1, 2) = 2
    left_max[4] = max(left_max[3], height[4]) = max(2, 1) = 2
    left_max[5] = max(left_max[4], height[5]) = max(2, 0) = 2
    left_max[6] = max(left_max[5], height[6]) = max(2, 1) = 2
    left_max[7] = max(left_max[6], height[7]) = max(2, 3) = 3
    left_max[8] = max(left_max[7], height[8]) = max(3, 2) = 3
    left_max[9] = max(left_max[8], height[9]) = max(3, 1) = 3
    left_max[10] = max(left_max[9], height[10]) = max(3, 2) = 3
    left_max[11] = max(left_max[10], height[11]) = max(3, 1) = 3

3. Fill right_max array:
    right_max[11] = height[11] = 1
    right_max[10] = max(right_max[11], height[10]) = max(1, 2) = 2
    right_max[9] = max(right_max[10], height[9]) = max(2, 1) = 2
    right_max[8] = max(right_max[9], height[8]) = max(2, 2) = 2
    right_max[7] = max(right_max[8], height[7]) = max(2, 3) = 3
    right_max[6] = max(right_max[7], height[6]) = max(3, 1) = 3
    right_max[5] = max(right_max[6], height[5]) = max(3, 0) = 3
    right_max[4] = max(right_max[5], height[4]) = max(3, 1) = 3
    right_max[3] = max(right_max[4], height[3]) = max(3, 2) = 3
    right_max[2] = max(right_max[3], height[2]) = max(3, 0) = 3
    right_max[1] = max(right_max[2], height[1]) = max(3, 1) = 3
    right_max[0] = max(right_max[1], height[0]) = max(3, 0) = 3

4. Calculate the trapped water:
    water_trapped = 0
    for i from 0 to 11:
         water_trapped += min(left_max[i], right_max[i]) - height[i]

    Detailed calculation:
    i = 0: water_trapped += min(0, 3) - 0 = 0
    i = 1: water_trapped += min(1, 3) - 1 = 0
    i = 2: water_trapped += min(1, 3) - 0 = 1
    i = 3: water_trapped += min(2, 3) - 2 = 0
    i = 4: water_trapped += min(2, 3) - 1 = 1
    i = 5: water_trapped += min(2, 3) - 0 = 2
    i = 6: water_trapped += min(2, 3) - 1 = 1
    i = 7: water_trapped += min(3, 3) - 3 = 0
    i = 8: water_trapped += min(3, 2) - 2 = 0
    i = 9: water_trapped += min(3, 2) - 1 = 1
    i = 10: water_trapped += min(3, 2) - 2 = 0
    i = 11: water_trapped += min(3, 1) - 1 = 0

    Total water trapped = 6
