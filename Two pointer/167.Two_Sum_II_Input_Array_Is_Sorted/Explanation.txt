Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.


Explanation:
This problem is a classic example of the two-pointer technique. The array is sorted, which allows us to use two pointers to find the two numbers that add up to the target.

Explanation:
1. Initialize two pointers, one starting at the beginning of the array (left) and the other at the end of the array (right).
2. Calculate the sum of the elements at these two pointers.
3. If the sum is equal to the target, return the indices (adjusted for 1-based indexing).
4. If the sum is less than the target, move the left pointer to the right to increase the sum.
5. If the sum is greater than the target, move the right pointer to the left to decrease the sum.
6. Repeat steps 2-5 until the solution is found.

Dry Run:

Let's dry run the example 1: numbers = [2, 7, 11, 15], target = 9

1. Initialize two pointers:
    left = 0 (pointing to 2)
    right = 3 (pointing to 15)

2. Calculate the sum:
    sum = numbers[left] + numbers[right] = 2 + 15 = 17

3. Compare the sum with the target:
    17 > 9, so move the right pointer to the left:
    right = 2 (pointing to 11)

4. Calculate the sum again:
    sum = numbers[left] + numbers[right] = 2 + 11 = 13

5. Compare the sum with the target:
    13 > 9, so move the right pointer to the left:
    right = 1 (pointing to 7)

6. Calculate the sum again:
    sum = numbers[left] + numbers[right] = 2 + 7 = 9

7. Compare the sum with the target:
    9 == 9, so we found the solution:
    Return [left + 1, right + 1] = [1, 2]

The dry run shows that the two-pointer technique successfully finds the indices of the two numbers that add up to the target.
