Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107


Dry Run for nums = [1, 2, 3, -3, 1, 1, 1, 4, 2, -3], k = 3

Initial State:
count = 0
current_sum = 0
prefix_sums = {0: 1}

Iteration 1:
num = 1
current_sum = 1
current_sum - k = -2 (not in prefix_sums)
prefix_sums = {0: 1, 1: 1}

Iteration 2:
num = 2
current_sum = 3
current_sum - k = 0 (found in prefix_sums, count += 1)
count = 1
prefix_sums = {0: 1, 1: 1, 3: 1}

Iteration 3:
num = 3
current_sum = 6
current_sum - k = 3 (found in prefix_sums, count += 1)
count = 2
prefix_sums = {0: 1, 1: 1, 3: 1, 6: 1}

Iteration 4:
num = -3
current_sum = 3
current_sum - k = 0 (found in prefix_sums, count += 1)
count = 3
prefix_sums = {0: 1, 1: 1, 3: 2, 6: 1}

Iteration 5:
num = 1
current_sum = 4
current_sum - k = 1 (found in prefix_sums, count += 1)
count = 4
prefix_sums = {0: 1, 1: 1, 3: 2, 4: 1, 6: 1}

Iteration 6:
num = 1
current_sum = 5
current_sum - k = 2 (not in prefix_sums)
prefix_sums = {0: 1, 1: 1, 3: 2, 4: 1, 5: 1, 6: 1}

Iteration 7:
num = 1
current_sum = 6
current_sum - k = 3 (found in prefix_sums, count += 2)
count = 6
prefix_sums = {0: 1, 1: 1, 3: 2, 4: 1, 5: 1, 6: 2}

Iteration 8:
num = 4
current_sum = 10
current_sum - k = 7 (not in prefix_sums)
prefix_sums = {0: 1, 1: 1, 3: 2, 4: 1, 5: 1, 6: 2, 10: 1}

Iteration 9:
num = 2
current_sum = 12
current_sum - k = 9 (not in prefix_sums)
prefix_sums = {0: 1, 1: 1, 3: 2, 4: 1, 5: 1, 6: 2, 10: 1, 12: 1}

Iteration 10:
num = -3
current_sum = 9
current_sum - k = 6 (found in prefix_sums, count += 2)
count = 8
prefix_sums = {0: 1, 1: 1, 3: 2, 4: 1, 5: 1, 6: 2, 9: 1, 10: 1, 12: 1}

Final count of subarrays with sum equal to k: 8

